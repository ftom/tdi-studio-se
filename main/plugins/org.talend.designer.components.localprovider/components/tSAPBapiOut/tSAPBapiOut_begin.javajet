<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.metadata.IMetadataTable
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.utils.TalendTextUtils
    java.util.List
    java.util.Map
" 
%>

<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String graphicalUniqueName = cid.replace("_TSAPBapi_OUT","");
	
	List<? extends IConnection> incomingConns = node.getIncomingConnections();

    List<Map<String, String>> originalInputParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__MAPPING_INPUT__");
	List<Map<String, String>> inputParameters = new java.util.ArrayList<Map<String, String>>();
	
	List<String> usefulConnections = new java.util.ArrayList<String>();
	
	String sapFunction = ElementParameterParser.getValue(node,"__SAP_FUNCTION__");
%>
	org.talend.sap.DocumentHelper documentHelper_<%=cid%> = new org.talend.sap.DocumentHelper(); 
	documentHelper_<%=cid%>.setFunctionName(<%=sapFunction%>);
<%
	
	for(Map<String, String> originalInputParameter : originalInputParameters){
		Map<String, String> inputParameter = new java.util.HashMap<String, String>();
		inputParameter.put("NAME", TalendTextUtils.removeQuotes(originalInputParameter.get("NAME")));
		inputParameter.put("TYPE", TalendTextUtils.removeQuotes(originalInputParameter.get("TYPE")));
		inputParameter.put("SCHEMA", TalendTextUtils.removeQuotes(originalInputParameter.get("SCHEMA")));
		inputParameter.put("PARENT_ROW", TalendTextUtils.removeQuotes(originalInputParameter.get("PARENT_ROW")));
		
		String name = inputParameter.get("NAME");
		String type = inputParameter.get("TYPE");
		
		String componentSchemaName = inputParameter.get("SCHEMA");
		
		if(componentSchemaName == null || "".equals(componentSchemaName)) {
			continue;
		}
		
		//TODO it can't work,need to fix it,so now we only can get graph node
		//IMetadataTable metadata = node.getMetadataTable(componentSchemaName);
		
		List<? extends INode> grpapicalNodes = node.getProcess().getGraphicalNodes();
		INode graphicalNode = null;
		for(INode gnode : grpapicalNodes) {
			if(graphicalUniqueName.equals(gnode.getUniqueName())) {
				graphicalNode = gnode;
				break;
			}
		}
		IMetadataTable metadata = graphicalNode.getMetadataTable(componentSchemaName);
		
		List<IMetadataColumn> columns = metadata.getListColumns();
		
		if(columns == null || columns.isEmpty()) {
			continue;
		}
		
		if("SINGLE".equals(type)) {
			IMetadataColumn column = columns.get(0);
%>
			documentHelper.addSingleParameter("<%=column.getLabel()%>",<%=column.getDefault()%>);
<%
		} else if("STRUCTURE".equals(type)) {
%>
			documentHelper.addStructParameter("<%=name%>");
<%
			for(IMetadataColumn column : columns) {
%>
			documentHelper.addStructChildParameter("<%=column.getLabel()%>",<%=column.getDefault()%>);
<%
			}
		} else if("TABLE".equals(type)) {
			
			String sourceRow = inputParameter.get("PARENT_ROW");
			if(sourceRow==null || "".equals(sourceRow)) {
				continue;
			}
			
			for(int i=0;i<incomingConns.size();i++){
    			IConnection sourceConn = incomingConns.get(i);
	    		if (sourceConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA) && sourceRow.equals(sourceConn.getName())) {
					inputParameter.put("CONNECTION", sourceRow);
	    			usefulConnections.add(sourceRow);
	    		}
    		}
    		
		}
		
		inputParameters.add(inputParameter);
	}
%>
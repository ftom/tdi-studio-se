<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.utils.TalendTextUtils
		java.util.List
		java.util.Map
	" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	boolean hasDataOutput = false;
	if(conns!=null){
		for(int i=0;i<conns.size();i++){
			IConnection connTemp = conns.get(i);
		    if (connTemp.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		   		hasDataOutput = true;
		   		break;
		    }
		}
	}
	
	if(!hasDataOutput) {
		return "";
	}
	
	List<Map<String, String>> originalOutputParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
	List<Map<String, String>> outputParameters = new java.util.ArrayList<Map<String, String>>();
	for(Map<String, String> originalOutputParameter : originalOutputParameters){
		Map<String, String> outputParameter = new java.util.HashMap<String, String>();
		outputParameter.put("NAME", TalendTextUtils.removeQuotes(originalOutputParameter.get("NAME")));
		outputParameter.put("TYPE", TalendTextUtils.removeQuotes(originalOutputParameter.get("TYPE")));
		outputParameter.put("SCHEMA", TalendTextUtils.removeQuotes(originalOutputParameter.get("SCHEMA")));
		outputParameters.add(outputParameter);
	}
%>
	}
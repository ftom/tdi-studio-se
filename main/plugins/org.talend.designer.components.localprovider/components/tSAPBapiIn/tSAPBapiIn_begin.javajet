<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		org.talend.core.model.utils.TalendTextUtils
		java.util.List
		java.util.ArrayList
		java.util.Map
		java.util.HashMap
	" 
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	String graphicalUniqueName = cid.replace("_TSAPBapi_IN","");
	
	List< ? extends IConnection> conns = node.getOutgoingSortedConnections();
	List<IConnection> connections = new java.util.ArrayList<IConnection>();
	List<String> connNames = new java.util.ArrayList<String>(); 
	
	if(conns!=null){
		for(int i=0;i<conns.size();i++){
			IConnection conn = conns.get(i);
		    if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
		   		connections.add(conn);
		   		connNames.add(conn.getName());
		    }
		}
	}
	
	if(connections.isEmpty()) {
		return "";
	}

	List<Map<String, String>> originalOutputParameters = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__SCHEMAS__");
	List<Map<String, Object>> outputParameters = new ArrayList<Map<String, Object>>();
	
	for(int i=0;i<connections.size();i++){
		IConnection conn = connections.get(i);
		IMetadataTable metadata = conn.getMetadataTable();
		
		for(Map<String, String> originalOutputParameter : originalOutputParameters){
			String schemaName = TalendTextUtils.removeQuotes(originalOutputParameter.get("SCHEMA"));
			if(metadata.getLabel().equals(schemaName)) {
				Map<String, Object> outputParameter = new java.util.HashMap<String, Object>();
				outputParameter.put("NAME", TalendTextUtils.removeQuotes(originalOutputParameter.get("NAME")));
				outputParameter.put("TYPE", TalendTextUtils.removeQuotes(originalOutputParameter.get("TYPE")));
				outputParameter.put("SCHEMA", schemaName);
				outputParameter.put("COLUMNS",columns);
				List<IMetadataColumn> columns = metadata.getListColumns();
				outputParameter.put("CONNECTION",conn.getLabel());
				outputParameters.add(outputParameter);
				break;
			}
		}
	}
	
	String sapFunction = ElementParameterParser.getValue(node,"__SAP_FUNCTION__");
%>
	org.dom4j.Document outputDocument_<%=cid%> = (org.dom4j.Document)globalMap.get("outputDocument_<%=graphicalUniqueName%>");
	org.talend.sap.DocumentExtractor documentExtractor_<%=cid%> = new org.talend.sap.DocumentExtractor(outputDocument_<%=cid%>,<%=sapFunction%>);
<%
	for(Map<String, Object> outputParameter : outputParameters){
		String name = (String)outputParameter.get("NAME");
		String type = (String)outputParameter.get("TYPE");
		String schemaName = (String)outputParameter.get("SCHEMA");
		String connectionName = (String)outputParameter.get("CONNECTION"); 
		List<IMetadataColumn> columns = (List<IMetadataColumn>)outputParameter.get("COLUMNS");
		if(columns == null || columns.isEmpty()) {
			continue;
		}
%>
		boolean go_<%=schemaName%> = true;
<%
		if("SINGLE".equals(type)) {
			IMetadataColumn column = columns.get(0);
%>
			<%=connectionName%>.<%=column.getLabel()%> = documentExtractor_<%=cid%>.getSingleResult("<%=column.getLabel()%>");//String
<%
			continue;
		}
%>
		List<String> columnNames_<%=schemaName%> = new ArrayList<String>();
<%
		for(IMetadataColumn column : columns) {
%>
			columnNames_<%=schemaName%>.add("<%=column.getLabel()%>");
<%
		}
		
		if("STRUCTURE".equals(type)) {
%>
			List<String> structure_<%=schemaName%> = documentExtractor_<%=cid%>.getStructureResult("<%=name%>",columnNames_<%=schemaName%>);
<%
			for(int i=0;i<columns.size();i++) {
				IMetadataColumn column = columns.get(i);
%>
				<%=connectionName%>.<%=column.getLabel()%> = structure_<%=schemaName%>.get(<%=i%>);
<%
			}
		} else if("TABLE".equals(type)) {
%>
			List<List<String>> table_<%=schemaName%> = documentExtractor_<%=cid%>.getTableResult("<%=name%>",columnNames_<%=schemaName%>);
			go_<%=schemaName%> = (table_<%=schemaName%>!=null && table_<%=schemaName%>.size()>0);
<%		
		}
	}
%>

	while(
<%
	while(outputParameters.hasNext()){
		Map<String, Object> outputParameter = outputParameters.next();
		String schemaName = (String)outputParameter.get("SCHEMA");
%>
		go_<%=schemaName%>
<%
		if(outputParameters.hasNext()) {
%>
		||
<%
		}
	}
%>
	) {
<%
	for(Map<String, Object> outputParameter : outputParameters){
		String name = (String)outputParameter.get("NAME");
		String type = (String)outputParameter.get("TYPE");
		String schemaName = (String)outputParameter.get("SCHEMA");
		String connectionName = (String)outputParameter.get("CONNECTION"); 
		List<IMetadataColumn> columns = (List<IMetadataColumn>)outputParameter.get("COLUMNS");
		if("SINGLE".equals(type)) {
		
		} else if("STRUCTURE".equals(type)) {
		
		} else if("TABLE".equals(type)) {
		
		}
	}
%>
	}
